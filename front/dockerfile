# Stage 1: Base Image
FROM node:20-alpine AS base

# Stage 2: Install Dependencies
FROM base AS deps

# Install libc6-compat if needed
RUN apk add --no-cache libc6-compat

# Set the working directory
WORKDIR /app

# Copy package files and install dependencies based on the preferred package manager
COPY package.json yarn.lock* package-lock.json* pnpm-lock.yaml* ./
RUN \
  if [ -f yarn.lock ]; then yarn --frozen-lockfile; \
  elif [ -f package-lock.json ]; then npm ci; \
  elif [ -f pnpm-lock.yaml ]; then yarn global add pnpm && pnpm i; \
  else echo "Lockfile not found." && exit 1; \
  fi

# Stage 3: Rebuild Source Code
FROM base AS builder

# Set the working directory
WORKDIR /app

# Copy node_modules from the 'deps' stage
COPY --from=deps /app/node_modules ./node_modules

# Copy the entire source code
COPY . .

ENV NEXT_PUBLIC_BACKEND=http://back_end:3001
ENV NEXT_PUBLIC_DELAY=1000

# Build the application
RUN yarn build

# Stage 4: Production Image
FROM base AS runner

# Set the working directory
WORKDIR /app

# Set the environment to production
ENV NODE_ENV=production

# Create a non-root user for Docker
RUN addgroup -g 1001 -S nodejs
RUN adduser -S nextjs -u 1001

# Copy public folder from the 'builder' stage
COPY --from=builder /app/public ./public

# Automatically leverage output traces to reduce image size
# https://nextjs.org/docs/advanced-features/output-file-tracing
COPY --from=builder --chown=nextjs:nodejs /app/.next/standalone ./
COPY --from=builder --chown=nextjs:nodejs /app/.next/static ./.next/static

# Switch to the non-root user
USER nextjs

# Expose the application port
EXPOSE 3000

# Set environment variables
ENV PORT 3000
ENV HOSTNAME "0.0.0.0"

# Run the application
CMD ["node", "server.js"]
